name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        default: true
        type: boolean
      deploy_reflex:
        description: 'Deploy Reflex backend'
        required: true
        default: true
        type: boolean

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    # Environment will need to be created in GitHub repository settings
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build frontend
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        run: |
          echo "Building frontend for production..."
          npm run build:with-pwa
      
      - name: Set up Python
        if: ${{ github.event.inputs.deploy_reflex != 'false' }}
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Reflex dependencies
        if: ${{ github.event.inputs.deploy_reflex != 'false' }}
        run: |
          cd eznarratives_reflex_kivy
          pip install -r requirements.txt
      
      - name: Build Reflex application
        if: ${{ github.event.inputs.deploy_reflex != 'false' }}
        run: |
          cd eznarratives_reflex_kivy
          cp rxconfig.production.py rxconfig.py
          reflex build --production
      
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy frontend to production
        if: ${{ github.event.inputs.deploy_frontend != 'false' }}
        run: |
          echo "Deploying frontend to production server..."
          # Create deployment directory if it doesn't exist
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "mkdir -p /var/www/html"
          
          # Copy dist directory to server
          rsync -avz --delete dist/ ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:/var/www/html/
          
          # Run post-deployment tasks
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cd /var/www/html && find . -type d -exec chmod 755 {} \; && find . -type f -exec chmod 644 {} \;"
      
      - name: Deploy Reflex to production
        if: ${{ github.event.inputs.deploy_reflex != 'false' }}
        run: |
          echo "Deploying Reflex application to production server..."
          # Create deployment directory if it doesn't exist
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "mkdir -p /var/www/reflex"
          
          # Copy build directory to server
          rsync -avz --delete eznarratives_reflex_kivy/build/ ${{ secrets.SSH_USER }}@${{ secrets.HOST }}:/var/www/reflex/
          
          # Run post-deployment tasks
          ssh ${{ secrets.SSH_USER }}@${{ secrets.HOST }} "cd /var/www/reflex && find . -type d -exec chmod 755 {} \; && find . -type f -exec chmod 644 {} \; && chmod +x eznarratives && sudo systemctl restart eznarratives-reflex"
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          curl -sSf https://${{ secrets.DOMAIN }}/deployment-check.html || echo "Warning: Could not verify deployment"
      
      - name: Notify on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: good
          SLACK_TITLE: Production Deployment Successful
          SLACK_MESSAGE: 'EZ Narratives has been successfully deployed to production! :rocket:'
      
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Production Deployment Failed
          SLACK_MESSAGE: 'Production deployment failed. Please check the GitHub Actions logs.'

  run_smoke_tests:
    needs: build_and_deploy
    runs-on: ubuntu-latest
    # Environment will need to be created in GitHub repository settings
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install test dependencies
        run: |
          pip install pytest requests selenium webdriver-manager
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests against production environment..."
          python eznarratives_reflex_kivy/smoke_test.py --url https://${{ secrets.DOMAIN }}
      
      - name: Notify on test failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: deployments
          SLACK_COLOR: danger
          SLACK_TITLE: Production Smoke Tests Failed
          SLACK_MESSAGE: 'Smoke tests failed after deployment. Please check the GitHub Actions logs.'